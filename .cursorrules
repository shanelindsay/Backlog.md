# Instructions for Cursor AI Using Backlog.md CLI Tool

## Table of Contents

1. Project Structure and Navigation
2. Task Management
3. Documentation
4. Code Quality and Testing
5. Git Workflow
6. AI Agent Guidelines
7. Configuration Management
8. Review and Communication
9. Error Handling and Logging
10. Performance and Security
11. Maintenance and Dependencies
12. Accessibility and Internationalization
13. Version Control and Releases
14. Emergency Procedures
15. Project-Specific Rules
16. Definition of Done
17. Glossary
18. Templates and Examples

---

## 1. Project Structure and Navigation

1.1 Always check the project structure in `AGENTS.md` before making changes
1.2 Follow the directory structure under `backlog/` (see [Project Structure](./AGENTS.md#structure))

- Never modify files outside the designated project directories
- Always verify file locations before making changes

```markdown
backlog.md/ (Root folder for "Backlog.md" project)
└── backlog/ ("Backlog.md" folder for managing tasks and docs)
    ├── drafts/ (list of tasks that are not ready to be implemented)
    ├── tasks/ (list of tasks that are ready to be implemented)
    ├── archive/ (tasks that are no longer relevant)
    │   ├── tasks/
    │   └── drafts/
    ├── docs/ (project documentation)
    ├── decisions/ (team decisions regarding architecture/technologies)
    └── config.yml ("Backlog.md" configuration file)
```

Instructions for using the Backlog.md tool are available in the `readme.md` file in the root folder.

Each folder contains a `readme.md` file with instructions on how to use the Backlog.md tool for that specific folder.

## 2. Task Management

### 2.1 Source of Truth

- Tasks live under **`backlog/tasks/`** (drafts under **`backlog/drafts/`**)
- Each has YAML frontmatter & markdown content
- The task **markdown file** defines what to implement

### 2.2 Your Workflow

```bash
# 1 Find something to work on
backlog task list --status "To Do" --plain

# 2 Read details (use --plain for AI-friendly output)
backlog task 42 --plain

# 3 Start work: assign yourself & move column
backlog task edit 42 -a @Cursor -s "In Progress"

# 4 Add implementation plan before starting
backlog task edit 42 --plan "1. Analyze current implementation\n2. Identify bottlenecks\n3. Refactor in phases"

# 5 Break work down if needed
backlog task create "Refactor DB layer" -p 42 -a @Cursor -d "Description" --ac "Tests pass,Performance improved"

# 6 Complete and mark Done
backlog task edit 42 -s Done
```

### Before Marking a Task as Done

Always ensure you have:

1. ✅ Marked all acceptance criteria as completed in the task file (change `- [ ]` to `- [x]`)
2. ✅ Added an `## Implementation Notes` section documenting your approach
3. ✅ Run all tests and linting checks (`bun test` and `bun run check`)
4. ✅ Updated relevant documentation

### 2.3 Never modify task files directly - use the backlog CLI commands

## 3. Documentation

3.1 All documentation must be in Markdown format
3.2 Update relevant `README.md` files when making changes
3.3 Document architectural decisions in `backlog/decisions/`
3.4 Maintain clear and concise documentation
3.5 Include examples in documentation where appropriate

## 4. Code Quality and Testing

- Ensure all code changes are properly tested
- Follow the project's coding style and conventions
- Write clear, self-documenting code
- Include appropriate error handling
- Add comments for complex logic

## 5. Git Workflow

### 5.1 Commit Hygiene

- Append task ID to every commit: "TASK-42 - Add OAuth provider"
- For subtasks: "TASK-42.1 - Configure Google OAuth"
- Branch names: `tasks/task-42-oauth-provider`
- **Clean git status** before any commit (no untracked files, no uncommitted changes)
- Keep commits atomic and focused

## 6. AI Agent Guidelines

6.1 Always verify task requirements before implementation
6.2 Use semantic search to understand existing code
6.3 Check for similar implementations before creating new features
6.4 Document any assumptions in PR descriptions and `backlog/decisions/`
6.5 Consider edge cases and error scenarios

## 7. Configuration Management

- Never modify config.yml directly

- Use backlog config commands for configuration changes
- Maintain backward compatibility when possible
- Document configuration changes in decisions/

## 8. Review and Communication

- Ensure all changes are properly documented
- Verify that changes don't break existing functionality
- Check for potential security implications
- Consider performance impact of changes
- Validate against project requirements
- Use clear and professional language in comments and documentation
- Document any questions or concerns in task comments
- Keep commit messages and PR descriptions informative
- Reference relevant documentation when making changes

## 9. Error Handling and Logging

- Implement proper error handling for all new features
- Include appropriate logging
- Consider user experience in error scenarios
- Document error cases and recovery procedures

## 10. Performance and Security

- Consider performance implications of changes
- Optimize code when necessary
- Document performance considerations
- Test with realistic data volumes
- Follow security best practices
- Validate all user inputs
- Consider potential security implications
- Document security-related decisions

## 11. Maintenance and Dependencies

- Keep dependencies up to date
- Remove deprecated code
- Maintain backward compatibility
- Document maintenance procedures
- Document all new dependencies
- Justify dependency additions
- Consider impact on project size
- Check for license compatibility

## 12. Accessibility and Internationalization

- Ensure all features are accessible
- Follow accessibility guidelines
- Test with accessibility tools
- Document accessibility considerations
- Support multiple languages where appropriate
- Use proper character encoding
- Consider cultural differences
- Document internationalization requirements

## 13. Version Control and Releases

- Follow semantic versioning
- Document breaking changes
- Maintain changelog
- Tag releases appropriately

## 14. Emergency Procedures

- Document emergency procedures
- Know how to rollback changes
- Have backup procedures
- Document recovery steps

## 15. Project-Specific Rules

### 15.1 Task Files Must Have

```markdown
---
id: task-42
title: Add OAuth Provider
status: In Progress
assignee: ['@Cursor']
---

## Description
Short, imperative explanation of the work.

## Acceptance Criteria
**Write outcome-focused Acceptance Criteria (ACs).** ACs define the specific, verifiable conditions that must be met for the task to be considered complete. They should describe *what* the system does or *what* the user can do, not *how* it's implemented.
-   **Focus on Behavior & Outcomes:**
    -   *Good Example:* `- [ ] System sends a confirmation email after successful registration.`
    -   *Good Example:* `- [ ] Search results are displayed within 2 seconds.`
-   **Avoid Implementation Steps:**
    -   *Bad Example (Implementation):* `- [ ] Create a new `EmailService` class.` (This belongs in the Implementation Plan)
-   **Make them Testable/Verifiable:**
    -   *Good Example:* `- [ ] All API endpoints return a `200 OK` status for valid requests.`
    -   *Bad Example (Not Testable):* `- [ ] The user interface is intuitive.`

**Distinguish ACs from Implementation Plans:**
-   **Acceptance Criteria (What/Why):** Verifiable statements about the task's success.
-   **Implementation Plan (How):** Step-by-step guide on how to achieve the ACs. If the task is complex or involves multiple steps, create an `## Implementation Plan` section. For very simple tasks, this might not be needed, but ACs are always required.

- [ ] OAuth flow triggers on `/auth` (Example of a good, verifiable AC)
- [ ] Google & GitHub providers configured (Example of a good, verifiable AC)
- [ ] Refresh tokens handled (Example of a good, verifiable AC)
- [ ] P95 latency ≤ 50 ms under 100 RPS (Example of a good, measurable AC)

## Implementation Plan
**This section details *how* the Acceptance Criteria will be met.** It should be drafted *before* starting code changes.
1. Research OAuth 2.0 flow requirements
2. Set up provider configurations
3. Implement authentication middleware
4. Add token refresh logic
5. Write integration tests

## Implementation Notes (only added after working on the task)
- Added `src/graphql/resolvers/user.ts`
- Considered DataLoader but deferred
- Follow‑up: integrate cache layer
```

### 15.2 Other Rules

- Follow Backlog.md CLI conventions
- Use proper task status transitions
- Maintain task history
- Follow project naming conventions
- Use appropriate labels for tasks
- Write relevant tests when implementing new functionality or fixing bugs
- Use proper task prioritization
- Maintain task dependencies
- Follow project branching strategy

## 16 Definition of Done

A task is **Done** only when **ALL** of the following are complete:

1. **Acceptance criteria** checklist in the task file is fully checked (all `- [ ]` changed to `- [x]`).  
2. **Implementation plan** was followed or deviations were documented in Implementation Notes.  
3. **Automated tests** (unit + integration) cover new logic and CI passes.  
4. **Static analysis**: linter & formatter succeed (run `bun run check`).  
5. **Documentation**:  
   - All relevant docs updated (README, guidelines, etc.).  
   - Task file **MUST** have an `## Implementation Notes` section added summarising:
     - Approach taken
     - Technical decisions and trade-offs
     - Files modified
     - Any follow-up tasks needed
6. **Review**: code reviewed (when working with a team).  
7. **Task hygiene**: status set to **Done** via CLI (`backlog task edit <id> -s Done`).  
8. **No regressions**: performance, security and licence checks green.

⚠️ **IMPORTANT**: Never mark a task as Done without completing ALL items above, especially:

- Marking acceptance criteria checkboxes as complete
- Adding comprehensive Implementation Notes
- Marking the task as Done

## 17. Glossary

- Add a glossary of project-specific terms and acronyms
- Add "Subtask" entry: decimal numbering, CLI creation, referencing, and storage

## 18. Templates and Examples

- Add a `docs/` directory for guides (onboarding, semantic search, coding style, etc.)
- Automate rule enforcement where possible (e.g., with pre-commit hooks, CI checks)
- Regularly review and update rules to reflect project evolution and lessons learned

## Code Review

- Review code for:
  - Functionality
  - Performance
  - Security
  - Maintainability
  - Documentation
  - Testing
  - Accessibility
  - Internationalization

## Emergency Procedures

- Document emergency procedures
- Know how to rollback changes
- Have backup procedures
- Document recovery steps

## Project-Specific Rules

- Follow Backlog.md CLI conventions
- Use proper task status transitions
- Maintain task history
- Follow project naming conventions
- Use appropriate labels for tasks
- Keep task descriptions clear and complete
- Follow the established workflow
- Use proper task prioritization
- Maintain task dependencies
- Follow project branching strategy

## Backlog.md Tool - CLI usage

| Purpose | Command |
|---------|---------|
| Create task | `backlog task create "Add OAuth System"`                    |
| Create with plan | `backlog task create "Feature" --plan "Step 1\nStep 2"`     |
| Create with AC | `backlog task create "Feature" --ac "Must work,Must be tested"` |
| Create with deps | `backlog task create "Feature" --dep task-1,task-2` |
| Create sub task | `backlog task create -p 14 "Add Login with Google"`                    |
| List tasks  | `backlog task list --plain`                                  |
| View detail | `backlog task 7 --plain`                                     |
| Edit        | `backlog task edit 7 -a @Cursor -l auth,backend`       |
| Add plan    | `backlog task edit 7 --plan "Implementation approach"`    |
| Add AC      | `backlog task edit 7 --ac "New criterion,Another one"`    |
| Add deps    | `backlog task edit 7 --dep task-1 --dep task-2`        |
| Archive     | `backlog task archive 7`                             |
| Draft flow  | `backlog draft create "Spike GraphQL"` → `backlog draft promote 3.1` |
| Demote to draft| `backlog task demote <id>` |

## Backlog.md Tool - Tips for AI Agents

- Keep tasks **small, atomic, and testable**; create subtasks liberally.  
- Prefer **idempotent** changes so reruns remain safe.  
- Leave brief **breadcrumbs** in `## Implementation Notes`; humans may continue your thread.  
- If uncertain, **draft a new task** describing the ambiguity rather than guessing.
- **Always use `--plain` flag** when listing or viewing tasks for AI-friendly text output instead of interactive UI.
- **Draft an Implementation Plan** before starting work using `--plan` flag to outline your approach.
- Update the plan if significant changes occur during implementation.
- **When to add an Implementation Plan:** Always add this section if the task involves more than a single, trivial step. It helps communicate your approach and allows for early feedback. For instance, if a task is "Fix typo in button text", an implementation plan is likely overkill. If it's "Implement password reset feature", a plan is crucial.
